##############################
# Module to write MCDC input #
##############################

import logging
from pathlib import Path

import FreeCAD

from ..code_version import *
from ..utils.functions import SurfacesDict
from .functions import change_surf_sign, mcdc_surface, write_mcdc_region

logger = logging.getLogger("general_logger")


class MCDCInput:
    def __init__(self, Meta, Surfaces, options, tolerances, numeric_format):
        self.Cells = Meta
        self.options = options
        self.tolerances = tolerances
        self.numeric_format = numeric_format

        self.get_surface_table()
        self.simplify_planes(Surfaces)
        self.Surfaces = self.sorted_surfaces(Surfaces)

        self.Materials = set()
        for cell in self.Cells:
            mat = getattr(cell, 'fill', None)
            if mat is not None:
                self.Materials.add(mat)

    def write_py(self, filename):
        logger.info(f"write MCDC python script {filename}")

        # get all the materials present in the model
        for cell in self.Cells:
            if cell.Material != 0:
                self.Materials.add(cell.Material)

        Path(filename).parent.mkdir(parents=True, exist_ok=True)
        with open(file=filename, mode="w", encoding="utf-8") as self.inpfile:
            self.write_header()

            if len(self.Materials) > 0:
                self.inpfile.write("# Materials setup\n")
                self.write_materials()
            self.inpfile.write("\n")

            self.inpfile.write("# Surface setup\n")
            self.write_surface_block()
            self.inpfile.write("\n")

            self.inpfile.write("# Cell definition \n")
            self.write_cell_block()
        return

    def write_py_header(self):
        Header = '''
        # MCDC input file generated by GEOUNED
        import mcdc
        import numpy as np
        '''
        self.inpfile.write(Header)

    def write_py_materials(self):

        for idx, mat in enumerate(self.Materials, start=1):

            cap    = mat.capture.tolist() if hasattr(mat, 'capture') else None
            sca    = mat.scatter.tolist() if hasattr(mat, 'scatter') else None
            fis    = mat.fission.tolist() if hasattr(mat, 'fission') else None
            nu_s   = mat.nu_s.tolist()     if hasattr(mat, 'nu_s')    else None
            nu_p   = mat.nu_p.tolist()     if hasattr(mat, 'nu_p')    else None
            nu_d   = mat.nu_d.tolist()     if hasattr(mat, 'nu_d')    else None
            chi_p  = mat.chi_p.tolist()    if hasattr(mat, 'chi_p')   else None
            chi_d  = mat.chi_d.tolist()    if hasattr(mat, 'chi_d')   else None
            speed  = mat.speed.tolist()    if hasattr(mat, 'speed')   else None
            decay  = mat.decay.tolist()    if hasattr(mat, 'decay')   else None

            line = (
                f"M{idx} = mcdc.material("
                f"capture={cap}, "
                f"scatter={sca}, "
                f"fission={fis}, "
                f"nu_s={nu_s}, "
                f"nu_p={nu_p}, "
                f"nu_d={nu_d}, "
                f"chi_p={chi_p}, "
                f"chi_d={chi_d}, "
                f"speed={speed}, "
                f"decay={decay})\n"
            )
            self.inpfile.write(line + "\n")

    def write_py_surface_block(self):

        for surf in self.Surfaces[:-1]:
            self.write_py_surfaces(surf, boundary=False)
        self.write_py_surfaces(self.Surfaces[-1], boundary=True)
        self.inpfile.write("\n")

    def write_py_surfaces(self, surface, boundary=False):

        mcdc_sur_def = mcdc_surface(
            surface.Type,
            surface.Surf,
            self.tolerances)
        
        if not boundary:
            line = f"{surface.Name} = mcdc.surface({mcdc_sur_def})\n"
        else:
            line = f"{surface.Name} = mcdc.surface({mcdc_sur_def}, bc=\"vacuum\")\n"

        return line